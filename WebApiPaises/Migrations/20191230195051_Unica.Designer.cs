// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApiCaracterizacion.Models;

namespace WebApiCaracterizacion.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191230195051_Unica")]
    partial class Unica
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("caracterizacion.Models.Campo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(250);

                    b.Property<bool>("Disabled");

                    b.Property<int>("ID_Categoria");

                    b.Property<int>("ID_Plantilla");

                    b.Property<string>("Nombre")
                        .HasMaxLength(80);

                    b.Property<int>("Orden");

                    b.Property<int>("Type")
                        .HasMaxLength(90);

                    b.Property<int>("Valor_Defecto");

                    b.Property<int>("Valor_Maximo");

                    b.Property<int>("Valor_Minimo");

                    b.Property<int>("Visible");

                    b.HasKey("ID");

                    b.HasIndex("ID_Categoria");

                    b.HasIndex("ID_Plantilla");

                    b.ToTable("Campos");
                });

            modelBuilder.Entity("caracterizacion.Models.Categoria", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ID_Formulario");

                    b.Property<int>("ID_Padre");

                    b.Property<string>("Nombre")
                        .HasMaxLength(80);

                    b.Property<int>("Orden");

                    b.Property<int>("Visible");

                    b.HasKey("ID");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("caracterizacion.Models.Formulario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Fecha_Fin");

                    b.Property<DateTime>("Fecha_Inicio");

                    b.Property<int>("ID_Plantilla");

                    b.Property<int>("ID_Usuario");

                    b.HasKey("ID");

                    b.HasIndex("ID_Plantilla");

                    b.ToTable("Formularios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApiCaracterizacion.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebApiCaracterizacion.Models.Plantilla", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("ID");

                    b.ToTable("Plantillas");
                });

            modelBuilder.Entity("WebApiCaracterizacion.Models.Registro", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("ID_Campo");

                    b.Property<DateTime>("Valor_Date");

                    b.Property<float>("Valor_Float");

                    b.Property<int>("Valor_Integer");

                    b.Property<string>("Valor_String");

                    b.HasKey("ID");

                    b.HasIndex("ID_Campo");

                    b.ToTable("Registros");
                });

            modelBuilder.Entity("WebApiCaracterizacion.Models.Registro_Tabla", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ID_Formulario");

                    b.Property<int?>("Tablas_CampoID");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("ID_Formulario");

                    b.HasIndex("Tablas_CampoID");

                    b.ToTable("Registros_Tablas");
                });

            modelBuilder.Entity("WebApiCaracterizacion.Models.Selector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ID_Campo");

                    b.Property<int>("ID_Padre");

                    b.Property<string>("Nombre")
                        .HasMaxLength(80);

                    b.Property<int>("Orden");

                    b.Property<int>("Value");

                    b.Property<bool>("Visible");

                    b.HasKey("ID");

                    b.HasIndex("ID_Campo");

                    b.ToTable("Selectores");
                });

            modelBuilder.Entity("WebApiCaracterizacion.Models.Tablas_Campo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ID_Campo");

                    b.Property<string>("Nombre")
                        .HasMaxLength(80);

                    b.Property<string>("Tipo")
                        .HasMaxLength(80);

                    b.HasKey("ID");

                    b.HasIndex("ID_Campo");

                    b.ToTable("Tablas_Campos");
                });

            modelBuilder.Entity("caracterizacion.Models.Campo", b =>
                {
                    b.HasOne("caracterizacion.Models.Categoria", "Categoria")
                        .WithMany("Campos")
                        .HasForeignKey("ID_Categoria")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApiCaracterizacion.Models.Plantilla", "Plantilla")
                        .WithMany()
                        .HasForeignKey("ID_Plantilla")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("caracterizacion.Models.Formulario", b =>
                {
                    b.HasOne("WebApiCaracterizacion.Models.Plantilla", "Plantilla")
                        .WithMany()
                        .HasForeignKey("ID_Plantilla")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApiCaracterizacion.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApiCaracterizacion.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApiCaracterizacion.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApiCaracterizacion.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiCaracterizacion.Models.Registro", b =>
                {
                    b.HasOne("caracterizacion.Models.Campo", "Campo")
                        .WithMany()
                        .HasForeignKey("ID_Campo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiCaracterizacion.Models.Registro_Tabla", b =>
                {
                    b.HasOne("caracterizacion.Models.Formulario", "Formulario")
                        .WithMany()
                        .HasForeignKey("ID_Formulario")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApiCaracterizacion.Models.Tablas_Campo", "Tablas_Campo")
                        .WithMany()
                        .HasForeignKey("Tablas_CampoID");
                });

            modelBuilder.Entity("WebApiCaracterizacion.Models.Selector", b =>
                {
                    b.HasOne("caracterizacion.Models.Campo", "Campo")
                        .WithMany()
                        .HasForeignKey("ID_Campo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiCaracterizacion.Models.Tablas_Campo", b =>
                {
                    b.HasOne("caracterizacion.Models.Campo", "Campo")
                        .WithMany()
                        .HasForeignKey("ID_Campo")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
